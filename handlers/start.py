from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from db import add_user, get_user, update_user_name

from keyboards.main_menu import get_main_menu_keyboard
from states.form import Form

start_router = Router()

@start_router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    user = message.from_user
    if not user:
        await message.answer("–û—à–∏–±–∫–∞! –ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_id = user.id
    user_in_db = get_user(user_id)

    if user_in_db is None:
        print(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        add_user(user_id, user.full_name, user.username)

        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç-–ø—Å–∏—Ö–æ–ª–æ–≥ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π: \n"
            "‚Ä¢ –í—ã—Å–ª—É—à–∞–µ—Ç –±–µ–∑ –æ—Å—É–∂–¥–µ–Ω–∏—è \n"
            "‚Ä¢ –ü–æ–º–æ–∂–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç—Ä–µ–≤–æ–≥—É, —Å—Ç—Ä–µ—Å—Å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ \n"
            "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è —Å–∞–º–æ–ø–æ–º–æ—â–∏ \n\n"
            "üìå –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç? \n\n"
            "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ‚Äî 1 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ. \n"
            "–ü–æ–¥–ø–∏—Å–∫–∞ ‚Äî –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—Å–µ–≥–æ 189‚ÇΩ/–º–µ—Å—è—Ü (–¥–µ—à–µ–≤–ª–µ –∫–æ—Ñ–µ —Å —Å–æ–±–æ–π). \n\n"
            "üëâ –¢—ã –º–æ–∂–µ—à—å: \n"
            "‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Äî –ø–∏—à–∏ –æ–±–æ –≤—Å–µ–º, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç –≤ —á–∞—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å \n"
            "‚Ä¢ –°—Ä–∞–∑—É –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚Äî /pay \n\n"
            "P.S. –Ø –Ω–µ –∑–∞–º–µ–Ω—è—é –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–∞, –Ω–æ –º–æ–≥—É –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å, –ø–æ–∫–∞ —Ç—ã –∏—â–µ—à—å —Å–≤–æ–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞. –ò –¥–∞, —è –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—é ¬´–ö–∞–∫ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –º–∞—Ç–µ—Ä—å—é?¬ª‚Ä¶ –µ—Å–ª–∏ —Ç—ã —Å–∞–º –Ω–µ –∑–∞—Ö–æ—á–µ—à—å –æ–± —ç—Ç–æ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å. üòâ"
                    )

    else:
        print(f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        current_name = user_in_db[1]

        await message.answer(
            f"–°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç, {current_name}! –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω —Å–µ–≥–æ–¥–Ω—è?",
            reply_markup=get_main_menu_keyboard()
        )

@start_router.message(Form.waiting_for_name, F.text)
async def process_name(message: Message, state: FSMContext) -> None:
    user = message.from_user
    if not user or not message.text:
         await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏ —Å /start.")
         await state.clear()
         return

    new_name = message.text.strip()

    if len(new_name) < 2 or len(new_name) > 50:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–º—è (–æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    update_user_name(user.id, new_name)

    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ, –±—É–¥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ {new_name}!",
        reply_markup=get_main_menu_keyboard()
    )

    await state.clear()
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–≤–µ—Ä—à–∏–ª –≤–≤–æ–¥/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏. –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.")

