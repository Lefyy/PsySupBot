import os
from datetime import datetime
from aiogram import Router, F
# –£–±–µ–¥–∏—Å—å, —á—Ç–æ LabeledPrice –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –æ—Ç—Å—é–¥–∞
from aiogram.types import Message, LabeledPrice, SuccessfulPayment, PreCheckoutQuery, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.methods import SendInvoice # –ú–æ–∂–µ—Ç –∏ –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è, –Ω–æ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ db.py –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∏ —Ñ—É–Ω–∫—Ü–∏–∏
from db import add_payment, add_dialogue_message, extend_subscription, SUBSCRIPTION_DAYS_PER_PAYMENT

# --- –¢–æ–∫–µ–Ω –ü–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ü—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ---
PAYMENTS_PROVIDER_TOKEN = os.getenv("PAYMENTS_PROVIDER_TOKEN")

if not PAYMENTS_PROVIDER_TOKEN:
     print("–í–ù–ò–ú–ê–ù–ò–ï: PAYMENTS_PROVIDER_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")


payment_router = Router()

# --- –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏—Ç—å –ø–∞–∫–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π" (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@payment_router.callback_query(F.data == "pay_for_subscription")
async def process_pay_button(callback_query: CallbackQuery):
    user = callback_query.from_user
    if not user:
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_id = user.id

    await callback_query.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ...", show_alert=False)
    print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –û–ø–ª–∞—Ç–∏—Ç—å.")

    price_amount_kopecks = 18900 # 189 RUB = 18900 –∫–æ–ø–µ–µ–∫
    package_description = f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {SUBSCRIPTION_DAYS_PER_PAYMENT} –¥–Ω–µ–π."

    prices = [
        LabeledPrice(label=package_description, amount=price_amount_kopecks),
    ]

    try:
        await callback_query.message.answer_invoice(
            title="–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
            description=package_description,
            payload=f"sub_user_{user_id}_{SUBSCRIPTION_DAYS_PER_PAYMENT}d_{int(datetime.now().timestamp())}",
            provider_token=PAYMENTS_PROVIDER_TOKEN,
            currency="RUB",
            prices=prices,
            start_parameter=f"pay_{user_id}",
        )
        print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É.")

    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await callback_query.message.answer(
            "üõë –û–π-–æ–π! –ö–∞–∂–µ—Ç—Å—è, –ø–ª–∞—Ç–µ–∂ –∑–∞–±–ª—É–¥–∏–ª—Å—è –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ. \n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ö–∞—Ä—Ç–∞ –ø—Ä–∏—Ç–≤–æ—Ä—è–µ—Ç—Å—è –ø—É—Å—Ç–æ–π (—Ö–æ—Ç—è –º—ã –∑–Ω–∞–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–∞–∫) \n"
            "‚Ä¢ –ë–∞–Ω–∫ —Ä–µ—à–∏–ª –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–≤–æ—é —Ä–µ—à–∏–º–æ—Å—Ç—å \n"
            "‚Ä¢ –ü—Ä–æ—Å—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≥–ª—é–∫ (–±—ã–≤–∞–µ—Ç –¥–∞–∂–µ —É –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π) \n\n"
            "–ü–æ–ø—Ä–æ–±—É–π: \n\n"
            "- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã \n"
            "- –î–æ–∂–¥–∞—Ç—å—Å—è –°–ú–° –æ—Ç –±–∞–Ω–∫–∞ \n"
            "- –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É \n"
            "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π - –≤–º–µ—Å—Ç–µ –º—ã –ø–æ–±–µ–¥–∏–º —ç—Ç—É –æ—à–∏–±–∫—É! üí™ \n"
        )


# --- –ù–û–í–´–ô –•–≠–ù–î–õ–ï–†: –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–ø–∏—Å–∫–∞" –∏–∑ Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
@payment_router.message(F.text == "–ü–æ–¥–ø–∏—Å–∫–∞") # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–ø–∏—Å–∫–∞"
async def handle_subscription_button_from_menu(message: Message):
    user = message.from_user
    if not user:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_id = user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    if not PAYMENTS_PROVIDER_TOKEN:
        print("DEBUG: PAYMENTS_PROVIDER_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—á–µ—Ç.")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # --- –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ process_pay_button ---
    # –°—É–º–º–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å
    price_amount_kopecks = 18900 # 189 RUB = 18900 –∫–æ–ø–µ–µ–∫. –î–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ü–µ–Ω–æ–π –≤ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–µ!
    package_description = f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {SUBSCRIPTION_DAYS_PER_PAYMENT} –¥–Ω–µ–π."

    prices = [
        LabeledPrice(label=package_description, amount=price_amount_kopecks),
    ]

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º message.answer_invoice() –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á–µ—Ç–∞, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ Message-—Ö—ç–Ω–¥–ª–µ—Ä
        await message.answer_invoice(
            title="–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
            description=package_description,
            payload=f"sub_user_{user_id}_{SUBSCRIPTION_DAYS_PER_PAYMENT}d_{int(datetime.now().timestamp())}",
            provider_token=PAYMENTS_PROVIDER_TOKEN,
            currency="RUB",
            prices=prices,
            start_parameter=f"pay_{user_id}", # –ü–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤ –∫–æ–º–∞–Ω–¥–µ /start –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
        )
        print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–ø–∏—Å–∫–∞'.")

    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–ø–∏—Å–∫–∞': {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# --- –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è Pre-Checkout Query (—Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –î–û –æ–ø–ª–∞—Ç—ã) ---
@payment_router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    user_id = pre_checkout_query.from_user.id
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω Pre-Checkout Query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}!")
    print(f"DEBUG: Payload: {pre_checkout_query.invoice_payload}")
    print(f"DEBUG: –°—É–º–º–∞: {pre_checkout_query.total_amount / 100} {pre_checkout_query.currency}")

    await pre_checkout_query.answer(ok=True)
    print(f"DEBUG: Pre-Checkout Query –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω (–æ—Ç–≤–µ—Ç OK).")


# --- –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è SuccessfulPayment (—Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã) ---
@payment_router.message(F.successful_payment)
async def process_successful_payment(message: Message):
    user = message.from_user
    if not user or not message.successful_payment:
         print("DEBUG: –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ SuccessfulPayment.")
         return

    user_id = user.id
    payment = message.successful_payment

    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}!")
    print(f"DEBUG: –°—É–º–º–∞: {payment.total_amount / 100} {payment.currency}")
    print(f"DEBUG: Payload: {payment.invoice_payload}")
    print(f"DEBUG: Telegram Charge ID: {payment.telegram_payment_charge_id}")
    print(f"DEBUG: Provider Charge ID: {payment.provider_payment_charge_id}")

    add_payment(
        user_id=user_id,
        amount=payment.total_amount,
        currency=payment.currency,
        status='successful',
        telegram_charge_id=payment.telegram_payment_charge_id,
        provider_charge_id=payment.provider_payment_charge_id,
        invoice_payload=payment.invoice_payload
    )
    print(f"DEBUG: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î.")

    days_to_add = SUBSCRIPTION_DAYS_PER_PAYMENT

    new_expiry_date = extend_subscription(user_id, days_to_add)

    if new_expiry_date is not None:
         print(f"DEBUG: –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {days_to_add} –¥–Ω–µ–π. –ù–æ–≤–∞—è –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {new_expiry_date}.")
         confirmation_message = (
             "üéâ –¢–∞-–¥–∞–º! –¢—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–∫–∞—á–∞–ª(–∞) —Å–≤–æ—é –ø—Å–∏—Ö–∏—á–µ—Å–∫—É—é –±—Ä–æ–Ω—é! \n\n"
             "–¢–µ–ø–µ—Ä—å –≤ —Ç–≤–æ–µ–º –¥–æ—Å—Ç—É–ø–µ: \n"
             "‚úì –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π \n"
             "‚úì –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ \n"
             "‚úì –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∏–∞–ª–æ–≥–∏ \n\n"
             "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—à—å –∑–∞–±–æ—Ç—É –æ —Å–µ–±–µ! \n"
             f"–¢–µ–ø–µ—Ä—å —Ç—ã —Å—Ä–µ–¥–∏ 17% –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É—é—Ç –≤ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ. \n" # –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
         )
         await message.answer(confirmation_message)
    else:
         print(f"DEBUG: –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã.")
         error_msg = "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
         await message.answer(error_msg)