from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter

from states.form import Form

from keyboards.profile_keyboard import get_profile_inline_keyboard

from db import get_user

from datetime import datetime

profile_router = Router()

@profile_router.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å", ~StateFilter(Form.waiting_for_name))
async def handle_profile_command(message: Message) -> None:
    user = message.from_user
    if not user:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_id = user.id
    user_data = get_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î

    if user_data is None:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.")
        return

    full_name = user_data[1]
    join_date_str = user_data[3]
    expiry_date_str = user_data[4]

    try:
        join_date = datetime.fromisoformat(join_date_str)
        formatted_join_date = join_date.strftime("%d.%m.%Y %H:%M")
    except (ValueError, TypeError):
        formatted_join_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    try:
        expiry_date = datetime.fromisoformat(expiry_date_str)
        formatted_expiry_date = expiry_date.strftime("%d.%m.%Y %H:%M")

        if datetime.now() >= expiry_date:
            subscription_status = "–ò—Å—Ç–µ–∫–ª–∞"
        else:
            subscription_status = f"–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {formatted_expiry_date}"
    except (ValueError, TypeError):
        formatted_expiry_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        subscription_status = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    profile_text = (
        f"üë§ **–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:**\n"
        f"–ò–º—è: {full_name}\n"
        f"–î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {formatted_join_date}\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞: {subscription_status}"
    )

    await message.answer(
        profile_text,
        reply_markup=get_profile_inline_keyboard()  # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è"
    )

@profile_router.callback_query(F.data == "change_name_profile")
async def handle_change_name_callback(callback_query: CallbackQuery, state: FSMContext) -> None:
    user = callback_query.from_user
    if not user:
         await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
         return

    await callback_query.answer("–û–ö, –º–µ–Ω—è–µ–º –∏–º—è.") # –¢–µ–∫—Å—Ç –∑–¥–µ—Å—å –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω, –≤—Å–ø–ª—ã–≤–∞–µ—Ç –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.")

    await state.set_state(Form.waiting_for_name)
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_name.")